#!/usr/bin/env bash

#{{ ansible_managed }}

unset -v latest_backup
unset -v rst_option
unset -v rst_origin
unset -v origin_file

echo -e "Are you sure you want to restore? Yes/No";
read rst_option;

if [ $rst_option == 'Yes' ];
  then
    echo -e "Do you want to restore with Master or Slave database? Master/Slave";
    read rst_origin;

    if [ $rst_origin == 'Master' ];
      then
        origin_file={{ backup_identifier }};
    elif [ $rst_origin == 'Slave' ];
      then
        origin_file=passbolt-{{ _passbolt_slave }};
    fi

    if [ -n '$origin_file' ];
      then

        # find latest backup file
        for file in $(find {{ backup_path }} -type f -name *$origin_file.tgz)
        do
          [[ $file -nt $latest_backup ]] && latest_backup=$file
        done
        if [ -n '$lastest_backup' ]
          then
            echo -e "Using $latest_backup file"

            # stop services
            systemctl stop nginx

            # restore file backup
            tar xvzf $latest_backup -C /

            # restore database backup
            mysqldump=$(tar tzf $latest_backup | grep mysqldump)
            mysql < /$mysqldump

            sudo su -s /bin/bash -c "{{ passbolt_bin_path }}/cake passbolt cleanup" {{ passbolt_user }}

            # start services
            systemctl start nginx
            sudo su -s /bin/bash -c "{{ passbolt_bin_path }}/cake passbolt healthcheck" {{ passbolt_user }}
          else
            echo -e "File not found"
        fi
    fi
fi
